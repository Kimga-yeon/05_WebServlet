/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.56
 * Generated at: 2020-08-06 07:17:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.gy.wsp.member.model.vo.Member;

public final class boardInsert_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/views/board/../common/header.jsp", Long.valueOf(1596698218524L));
    _jspx_dependants.put("/WEB-INF/views/board/../common/footer.jsp", Long.valueOf(1596014528142L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.gy.wsp.member.model.vo.Member");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
 
	String type = request.getParameter("type"); 
	String cp = request.getParameter("cp");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>게시판</title>\r\n");
      out.write("<style>\r\n");
      out.write("    .insert-label {\r\n");
      out.write("      display: inline-block;\r\n");
      out.write("      width: 80px;\r\n");
      out.write("      line-height: 40px\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    .boardImg{\r\n");
      out.write("    \tcursor : pointer;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("\r\n");

	// Session에 저장되어있는 login정보를 가져와 loginMember 변수에 저장 
	Member loginMember = (Member)session.getAttribute("loginMember");

	// 쿠키에 저장된 saveEmail 꺼내오기
	boolean isSave = false; // 이메일 저장 체크박스 값을 수정하기 위한 변수 
	String saveId = ""; // 쿠키에 저장된 아이디를 저장할 변수 

	Cookie[] cookies = request.getCookies(); // 요청 주소와 관련된 쿠키를 모두 얻어옴.

	// 쿠키에 저장된 이메일 검출 
	if (cookies != null) {
		for (Cookie c : cookies) {

		// 얻어온 쿠키의 이름(key)가 "saveId"와 같은 쿠키를 찾음
		if ("saveId".equals(c.getName())) {
			saveId = c.getValue(); // saveOD 변수에 쿠키에 저장된 value를 저장 
			isSave = true;
		}
		}
	}

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"utf-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n");
      out.write("  <title>WebServer Project</title>\r\n");
      out.write("  \r\n");
      out.write("  <!-- Bootstrap core CSS -->\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\">\r\n");
      out.write("\r\n");
      out.write("\t<style>\r\n");
      out.write("\t     body {\r\n");
      out.write("\t       padding-top: 56px;\r\n");
      out.write("\t     }\r\n");
      out.write("\t     \r\n");
      out.write("\t </style>\r\n");
      out.write("\t <!-- sweetalert : alert창을 꾸밀 수 있게 해주는 라이브러리 https://sweetalert.js.org/ -->\r\n");
      out.write(" \t <script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\"></script>\r\n");
      out.write("\t <script>\r\n");
      out.write("\t \t/*** 이전 페이지에서 전달받은 내용을 alert창으로 표시하기 ***/\r\n");
      out.write("\t \t\r\n");
      out.write("\t \t");

	 	String msg = (String)(request.getSession().getAttribute("msg"));
	 	String status = (String)(request.getSession().getAttribute("status"));
	 	String text = (String)(request.getSession().getAttribute("text"));
	 	
      out.write("\r\n");
      out.write("\t \t\r\n");
      out.write("\t \t");
 if(msg !=null){ 
      out.write("\r\n");
      out.write("\t\t \tswal({\r\n");
      out.write("\t\t \t\ticon : \"");
      out.print(status);
      out.write("\",\r\n");
      out.write("\t\t \t\ttitle : \"");
      out.print(msg);
      out.write("\",\r\n");
      out.write("\t\t \t\ttext : \"");
      out.print(text != null ? text : "");
      out.write("\"\r\n");
      out.write("\t\t \t});\r\n");
      out.write("\t \t\r\n");
      out.write("\t \t");

	 		//Session에 존재하는 특정 키값의 속성 제거
	 		session.removeAttribute("msg");
	 		session.removeAttribute("status");
	 		session.removeAttribute("text");
	 	}
	 	
      out.write("\r\n");
      out.write("\t </script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- Navigation으로 된 header -->\r\n");
      out.write("\t<div class=\"header navbar navbar-expand-lg navbar-dark bg-dark fixed-top\">\r\n");
      out.write("\t\t<div class=\"container\">\r\n");
      out.write("\t\t\t<a class=\"navbar-brand\" href=\"");
      out.print(request.getContextPath());
      out.write("\">SEMI PROJECT</a>\r\n");
      out.write("\t\t\t<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n");
      out.write("\t\t\t<span class=\"navbar-toggler-icon\"></span>\r\n");
      out.write("\t\t\t</button>\r\n");
      out.write("\t\t\t<div class=\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n");
      out.write("\t\t\t\t<ul class=\"navbar-nav ml-auto\">\r\n");
      out.write("\t\t\t\t  <li class=\"nav-item\">\r\n");
      out.write("\t\t\t\t    <a class=\"nav-link\" href=\"");
      out.print(request.getContextPath());
      out.write("/board/list.do?type=2\">Board</a>\r\n");
      out.write("\t\t\t\t  </li>\r\n");
      out.write("\t\t\t\t  \r\n");
      out.write("\t\t\t\t  \r\n");
      out.write("\t\t\t\t  ");
      out.write("\r\n");
      out.write("\t\t\t\t  ");
 if(loginMember == null) {
      out.write("\r\n");
      out.write("\t\t\t\t  <li class=\"nav-item active\">\r\n");
      out.write("\t\t\t\t    <a class=\"nav-link\" data-toggle=\"modal\" href=\"#modal-container-1\">Login</a>\r\n");
      out.write("\t\t\t\t  </li>\r\n");
      out.write("\t\t\t\t  ");
 }else{ 
      out.write("\r\n");
      out.write("\t\t\t\t  <li class=\"nav-item active\">\r\n");
      out.write("\t\t\t\t    <a class=\"nav-link\"  href=\"");
      out.print(request.getContextPath());
      out.write("/member/myPage.do\">");
      out.print( loginMember.getMemberName() );
      out.write("</a>\r\n");
      out.write("\t\t\t\t  </li>\r\n");
      out.write("\t\t\t\t  <li class=\"nav-item active\">\r\n");
      out.write("\t\t\t\t    <a class=\"nav-link\"  href=\"");
      out.print(request.getContextPath());
      out.write("/member/logout.do\">Logout</a>\r\n");
      out.write("\t\t\t\t  </li>\r\n");
      out.write("\t\t\t\t  ");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t  \r\n");
      out.write("\t\t\t\t  \r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("\t<div class=\"modal fade\" id=\"modal-container-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\r\n");
      out.write("\t\t<div class=\"modal-dialog\" role=\"document\">\r\n");
      out.write("\t\t\t<div class=\"modal-content\">\r\n");
      out.write("\t\t\t\t<div class=\"modal-header\">\r\n");
      out.write("\t\t\t\t\t<h5 class=\"modal-title\" id=\"myModalLabel\">LOGIN</h5>\r\n");
      out.write("\t\t\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\">\r\n");
      out.write("\t\t\t\t\t\t<span aria-hidden=\"true\">×</span>\r\n");
      out.write("\t\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"modal-body\">\t\t\t\t\t\t<!-- 요청 주소 중 최상위 주소 (/wsp)를 얻어옴 -->\r\n");
      out.write("\t\t\t\t\t<form class=\"form-signin\" method=\"POST\" action=\"");
      out.print(request.getContextPath());
      out.write("/member/login.do\"\r\n");
      out.write("\t\t\t\t\t\tonsubmit=\"return loginValidate();\">\r\n");
      out.write("\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"memberEmail\" name=\"memberEmail\" placeholder=\"이메일\"\r\n");
      out.write("\t\t\t\t\t\tvalue=\"");
      out.print(saveId);
      out.write("\"> <br>\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" id=\"memberPwd\" name=\"memberPwd\"\r\n");
      out.write("\t\t\t\t\t\t\tplaceholder=\"비밀번호\"> <br>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"checkbox mb-3\">\r\n");
      out.write("\t\t\t\t\t\t\t<label> \r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"saveEmail\" ");
      out.print(isSave ? "checked" : "" );
      out.write("> 이메일 저장\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t</label>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">로그인</button>\r\n");
      out.write("\t\t\t\t\t\t<a class=\"btn btn-lg btn-secondary btn-block\" \r\n");
      out.write("\t\t\t\t\t\t\thref=\"");
      out.print(request.getContextPath());
      out.write("/member/signUpForm.do\">회원가입</a>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"modal-footer\">\r\n");
      out.write("\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\"\r\n");
      out.write("\t\t\t\t\t\tdata-dismiss=\"modal\">Close</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- Bootstrap core JS -->\r\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\r\n");
      out.write("\t<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("\t<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\" integrity=\"sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t// 로그인 유효성 검사\r\n");
      out.write("\t\t// -> 이메일 , 비밀번호 중 하나라도 입력되지 않으면 form태그 기본 이벤트를 제거한다.\r\n");
      out.write("\t\tfunction loginValidate(){\r\n");
      out.write("\t\t\tif($(\"#memberEmail\").val().trim() == \"\"){\r\n");
      out.write("\t\t\t\talert(\"이메일을 입력해 주세요.\")\r\n");
      out.write("\t\t\t\t$(\"#memberEmail\").focus();\r\n");
      out.write("\t\t\t\treturn false; // 기본 이벤트를 제거\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif($(\"#memberPwd\").val().trim() == \"\"){\r\n");
      out.write("\t\t\t\talert(\"비밀번호를 입력해 주세요.\")\r\n");
      out.write("\t\t\t\t$(\"#memberPwd\").focus();\r\n");
      out.write("\t\t\t\treturn false; // 기본 이벤트를 제거\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"container my-5\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t<h3>게시글 등록</h3>\r\n");
      out.write("\t\t\t<hr>\r\n");
      out.write("\t\t\t<!-- 파일 업로드를 위한 라이브러리\r\n");
      out.write("\t\t\t cos.jar 라이브러리 다운로드(http://www.servlets.com/\r\n");
      out.write("\t\t\t -->\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<!-- \r\n");
      out.write("\t\t\t\t- enctype : form 태그 데이터가 서버로 제출 될 때 인코딩 되는 방법을 지정. (POST 방식일 때만 사용 가능)\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t- application/x-www-form-urlencoded : 모든 문자를 서버로 전송하기 전에 인코딩 (form태그 기본값)\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t- multipart/form-data : 모든 문자를 인코딩 하지 않음.(원본 데이터가 유지되어 이미지, 파일등을 서버로 전송 할 수 있음.) \r\n");
      out.write("\t\t\t-->\r\n");
      out.write("\t\t\t<form action=\"");
      out.print(request.getContextPath());
      out.write("/board/insert.do?type=");
      out.print(type);
      out.write("&cp=");
      out.print(cp);
      out.write("\" method=\"post\" \r\n");
      out.write("\t\t\t\t  enctype=\"multipart/form-data\" role=\"form\" onsubmit=\"return validate();\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"mb-2\">\r\n");
      out.write("\t\t\t\t\t<label class=\"input-group-addon mr-3 insert-label\">카테고리</label> \r\n");
      out.write("\t\t\t\t\t<select\tclass=\"custom-select\" id=\"category\" name=\"category\" style=\"width: 150px;\">\r\n");
      out.write("\t\t\t\t\t\t<option value=\"10\">운동</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"20\">영화</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"30\">음악</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"40\">요리</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"50\">게임</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"60\">기타</option>\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"form-inline mb-2\">\r\n");
      out.write("\t\t\t\t\t<label class=\"input-group-addon mr-3 insert-label\">제목</label> \r\n");
      out.write("\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" size=\"70\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"form-inline mb-2\">\r\n");
      out.write("\t\t\t\t\t<label class=\"input-group-addon mr-3 insert-label\">작성자</label>\r\n");
      out.write("\t\t\t\t\t<h5 class=\"my-0\" id=\"writer\">");
      out.print( loginMember.getMemberEmail() );
      out.write("</h5>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"form-inline mb-2\">\r\n");
      out.write("\t\t\t\t\t<label class=\"input-group-addon mr-3 insert-label\">작성일</label>\r\n");
      out.write("\t\t\t\t\t<h5 class=\"my-0\" id=\"today\"></h5>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<hr>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"form-inline mb-2\">\r\n");
      out.write("\t\t\t\t\t<label class=\"input-group-addon mr-3 insert-label\">썸네일</label>\r\n");
      out.write("\t\t\t\t\t<div class=\"boardImg\" id=\"titleImgArea\">\r\n");
      out.write("\t\t\t\t\t\t<img id=\"titleImg\" width=\"200\" height=\"200\">\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"form-inline mb-2\">\r\n");
      out.write("\t\t\t\t\t<label class=\"input-group-addon mr-3 insert-label\">업로드<br>이미지</label>\r\n");
      out.write("\t\t\t\t\t<div class=\"mr-2 boardImg\" id=\"contentImgArea1\">\r\n");
      out.write("\t\t\t\t\t\t<img id=\"contentImg1\" width=\"150\" height=\"150\">\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<div class=\"mr-2 boardImg\" id=\"contentImgArea2\">\r\n");
      out.write("\t\t\t\t\t\t<img id=\"contentImg2\" width=\"150\" height=\"150\">\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<div class=\"mr-2 boardImg\" id=\"contentImgArea3\">\r\n");
      out.write("\t\t\t\t\t\t<img id=\"contentImg3\" width=\"150\" height=\"150\">\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<!-- 파일 업로드 하는 부분 -->\r\n");
      out.write("\t\t\t\t<div id=\"fileArea\">\r\n");
      out.write("\t\t\t\t\t<!--  multiple 속성\r\n");
      out.write("\t\t\t\t\t\t- input 요소 하나에 둘 이상의 값을 입력할 수 있음을 명시 (파일 여러개 선택 가능)\r\n");
      out.write("\t\t\t\t\t -->\r\n");
      out.write("\t\t\t\t\t<input type=\"file\" id=\"img1\" name=\"img1\" onchange=\"LoadImg(this,1)\"> \r\n");
      out.write("\t\t\t\t\t<input type=\"file\" id=\"img2\" name=\"img2\" onchange=\"LoadImg(this,2)\"> \r\n");
      out.write("\t\t\t\t\t<input type=\"file\" id=\"img3\" name=\"img3\" onchange=\"LoadImg(this,3)\"> \r\n");
      out.write("\t\t\t\t\t<input type=\"file\" id=\"img4\" name=\"img4\" onchange=\"LoadImg(this,4)\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t\t<label for=\"content\">내용</label>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<textarea class=\"form-control\" id=\"content\" name=\"content\"\r\n");
      out.write("\t\t\t\t\t\trows=\"10\" style=\"resize: none;\"></textarea>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<hr class=\"mb-4\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"text-center\">\r\n");
      out.write("\t\t\t\t\t<button type=\"submit\" class=\"btn btn-primary\">등록</button>\r\n");
      out.write("\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary\">목록으로</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- Footer -->\r\n");
      out.write("\t<div class=\"py-5 bg-dark footer\">\r\n");
      out.write("\t  <div class=\"container\">\r\n");
      out.write("\t    <p class=\"m-0 text-center text-white\">Copyright &copy; KH Information Educational Institute A-Class</p>\r\n");
      out.write("\t  </div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t// 오늘 날짜 출력 \r\n");
      out.write("\t\tvar today = new Date();\r\n");
      out.write("\t\tvar month = (today.getMonth()+1);\r\n");
      out.write("\r\n");
      out.write("\t\tvar str = today.getFullYear() + \"-\"\r\n");
      out.write("\t\t\t\t+ (month < 10 ? \"0\"+month : month) + \"-\"\r\n");
      out.write("\t\t\t\t+ today.getDate();\r\n");
      out.write("\t\t$(\"#today\").html(str);\r\n");
      out.write("\r\n");
      out.write("\t\t// 유효성 검사 \r\n");
      out.write("\t\tfunction validate() {\r\n");
      out.write("\t\t\tif ($(\"#title\").val().trim().length == 0) {\r\n");
      out.write("\t\t\t\talert(\"제목을 입력해 주세요.\");\r\n");
      out.write("\t\t\t\t$(\"#title\").focus();\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif ($(\"#content\").val().trim().length == 0) {\r\n");
      out.write("\t\t\t\talert(\"내용을 입력해 주세요.\");\r\n");
      out.write("\t\t\t\t$(\"#content\").focus();\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t // 이미지 공간을 클릭할 때 파일 첨부 창이 뜨도록 설정하는 함수\r\n");
      out.write("\t    $(function () {\r\n");
      out.write("\t       $(\"#fileArea\").hide();\r\n");
      out.write("\r\n");
      out.write("\t      $(\"#titleImgArea\").click(function () {\r\n");
      out.write("\t        $(\"#img1\").click();\r\n");
      out.write("\t      });\r\n");
      out.write("\t      $(\"#contentImgArea1\").click(function () {\r\n");
      out.write("\t        $(\"#img2\").click();\r\n");
      out.write("\t      });\r\n");
      out.write("\t      $(\"#contentImgArea2\").click(function () {\r\n");
      out.write("\t        $(\"#img3\").click();\r\n");
      out.write("\t      });\r\n");
      out.write("\t      $(\"#contentImgArea3\").click(function () {\r\n");
      out.write("\t        $(\"#img4\").click();\r\n");
      out.write("\t      });\r\n");
      out.write("\r\n");
      out.write("\t     /* $(\".boardImg\").on(\"click\",function(){\r\n");
      out.write("\t    \t  var index =  $(this).children(\"img\").prop(\"id\") + 1;\r\n");
      out.write("\t        console.log(index);\r\n");
      out.write("\t        $(\"#img\" + index).click();\r\n");
      out.write("\t      });*/\r\n");
      out.write("\r\n");
      out.write("\t        \r\n");
      out.write("\r\n");
      out.write("\t    });\r\n");
      out.write("\r\n");
      out.write("\t    // 각각의 영역에 파일을 첨부 했을 경우 미리 보기가 가능하도록 하는 함수\r\n");
      out.write("\t    function LoadImg(value, num) {\r\n");
      out.write("\t      if (value.files && value.files[0]) {\r\n");
      out.write("\t    \t  // value.files : 현재 요소에 파일이 업로드 되어 있는가?\r\n");
      out.write("\t    \t  // value.files[0] : multiple속성 사용으로 인해 여러 파일이 업로드 되었을 때 첫 번째 파일이 존재하는가?\r\n");
      out.write("\t    \t\t\t  \r\n");
      out.write("\t        var reader = new FileReader();\r\n");
      out.write("\t        // 자바스크립트 FileReader\r\n");
      out.write("        \t// 웹 애플리케이션이 비동기적으로 데이터를 읽기 위하여 읽을 파일을 가리키는 File 혹은 Blob객체를 이용해 파일의 내용을 읽고 사용자의 컴퓨터에 저장하는 것을 가능하게 해주는 객체\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("        \t// FileReader.onload\r\n");
      out.write("\t\t\t// load 이벤트의 핸들러. 이 이벤트는 읽기 동작이 성공적으로 완료 되었을 때마다 발생합니다.\r\n");
      out.write("\t        reader.onload = function (e) {\r\n");
      out.write("\t        \t//console.log(e.target.result);\r\n");
      out.write("\t        \t// e.target.result\r\n");
      out.write("\t        \t// -> 파일 읽기 동작을 성공한 객체에(fileTag) 올라간 결과(이미지 또는 파일)\r\n");
      out.write("\t        \t\r\n");
      out.write("\t          switch (num) {\r\n");
      out.write("\t            case 1:\r\n");
      out.write("\t              $(\"#titleImg\").attr(\"src\", e.target.result);\r\n");
      out.write("\t              break;\r\n");
      out.write("\t            case 2:\r\n");
      out.write("\t              $(\"#contentImg1\").attr(\"src\", e.target.result);\r\n");
      out.write("\t              break;\r\n");
      out.write("\t            case 3:\r\n");
      out.write("\t              $(\"#contentImg2\").attr(\"src\", e.target.result);\r\n");
      out.write("\t              break;\r\n");
      out.write("\t            case 4:\r\n");
      out.write("\t              $(\"#contentImg3\").attr(\"src\", e.target.result);\r\n");
      out.write("\t              break;\r\n");
      out.write("\t          }\r\n");
      out.write("\t        }\r\n");
      out.write("\r\n");
      out.write("\t        reader.readAsDataURL(value.files[0]);\r\n");
      out.write("\t        // FileReader.readAsDataURL()\r\n");
      out.write("\t      \t// 지정된의 내용을 읽기 시작합니다. Blob완료되면 result속성 data:에 파일 데이터를 나타내는 URL이 포함 됩니다.\r\n");
      out.write("\t      }\r\n");
      out.write("\t    }\r\n");
      out.write("\t\t\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
